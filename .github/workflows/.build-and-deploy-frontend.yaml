name: .build-and-deploy-frontend.yaml

on:
  workflow_call:
    outputs:
      image:
        description: "Docker image url"
        value: ${{ jobs.build-and-publish.outputs.image }}

permissions:
  contents: read
  id-token: write

jobs:
  test-and-verify:
    if: github.event_name == 'pull_request'
    name: Test and verify
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'

      - name: Cache npm modules webapp
        uses: actions/cache@v4
        id: yarn-cache-webapp # use this to check for `cache-hit` (`steps.yarn-cache.outputs.cache-hit != 'true'`)
        with:
          path: |
            apps/${{ github.workflow }}/node_modules
            ~/.cache/Cypress
          key: ${{ hashFiles(format('apps/{0}/yarn.lock',github.workflow)) }}

      # Install and build
      - name: Install & build bff
        working-directory: apps/etterlatte-node-server
        run: yarn install --frozen-lockfile && yarn build --outDir dist
        env:
          NPM_TOKEN: ${{ secrets.READER_TOKEN }}
      - name: Install node modules webapp
        if: steps.yarn-cache-webapp.outputs.cache-hit != 'true'
        working-directory: apps/${{ github.workflow }}
        run: yarn install --frozen-lockfile
        env:
          NPM_TOKEN: ${{ secrets.READER_TOKEN }}
      - name: build webapp
        working-directory: apps/${{ github.workflow }}
        run: yarn build
        env:
          NPM_TOKEN: ${{ secrets.READER_TOKEN }}

      # Run tests
      - name: Run unit tests client
        working-directory: apps/${{ github.workflow }}
        run: CI=true yarn test
        env:
          NPM_TOKEN: ${{ secrets.READER_TOKEN }}
      - name: Run unit tests BFF
        working-directory: apps/etterlatte-node-server
        run: CI=true yarn test
        env:
          NPM_TOKEN: ${{ secrets.READER_TOKEN }}
      - name: Run e2e tests (Cypress) client
        uses: cypress-io/github-action@v6
        env:
          NPM_TOKEN: ${{ secrets.READER_TOKEN }}
        with:
          install: false
          start: yarn start
          wait-on: 'http://localhost:5173'
          working-directory: apps/${{ github.workflow }}

  build-and-publish:
    if: github.event_name != 'pull_request'
    name: Build & publish
    runs-on: ubuntu-latest
    outputs:
      image: ${{ steps.docker-build-push.outputs.image }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'

      - name: Inject slug/short variables
        uses: rlespinasse/github-slug-action@v4

      - name: Cache npm modules webapp
        uses: actions/cache@v4
        id: yarn-cache-webapp # use this to check for `cache-hit` (`steps.yarn-cache.outputs.cache-hit != 'true'`)
        with:
          path: |
            apps/${{ github.workflow }}/node_modules
            ~/.cache/Cypress
          key: ${{ hashFiles(format('apps/{0}/yarn.lock',github.workflow)) }}

      # Install and build
      - name: Install & build bff
        working-directory: apps/etterlatte-node-server
        run: yarn install --frozen-lockfile && yarn build --outDir dist
        env:
          NPM_TOKEN: ${{ secrets.READER_TOKEN }}
      - name: Install node modules webapp
        if: steps.yarn-cache-webapp.outputs.cache-hit != 'true'
        working-directory: apps/${{ github.workflow }}
        run: yarn install --frozen-lockfile
        env:
          NPM_TOKEN: ${{ secrets.READER_TOKEN }}
      - name: build webapp
        working-directory: apps/${{ github.workflow }}
        run: yarn build
        env:
          NPM_TOKEN: ${{ secrets.READER_TOKEN }}

      # Run tests
      - name: Run unit tests client
        working-directory: apps/${{ github.workflow }}
        run: CI=true yarn test
        env:
          NPM_TOKEN: ${{ secrets.READER_TOKEN }}
      - name: Run unit tests BFF
        working-directory: apps/etterlatte-node-server
        run: CI=true yarn test
        env:
          NPM_TOKEN: ${{ secrets.READER_TOKEN }}

      - name: verify build folders webapp in bff
        working-directory: apps/
        run: |
          file etterlatte-node-server/build
          ls -l etterlatte-node-server/dist
          ls -l etterlatte-node-server/build
          ls -l etterlatte-node-server

      - name: Move webapp build to BFF location
        working-directory: apps/
        run: rm -rf etterlatte-node-server/build && mv -f ${{ github.workflow }}/build etterlatte-node-server
        shell: bash

      - name: Build and publish docker image
        uses: nais/docker-build-push@v0
        id: docker-build-push
        with:
          team: etterlatte
          identity_provider: ${{ secrets.NAIS_WORKLOAD_IDENTITY_PROVIDER }}
          project_id: ${{ vars.NAIS_MANAGEMENT_PROJECT_ID }}
          salsa: false
          build_args: |
           app_name=${{ github.workflow }}
          docker_context: apps/etterlatte-node-server
          image_suffix: ${{ github.workflow }}
          tag: ${{ env.GITHUB_REF_SLUG }}
      - name: Print docker tag
        run: echo 'Docker-tag er ${{ steps.docker-build-push.outputs.image }} ' >> $GITHUB_STEP_SUMMARY


  salsa:
    name: Generate SBOM, attest and sign image
    runs-on: ubuntu-latest
    needs: build-and-publish
    permissions:
      id-token: write
    steps:
      - name: NAIS login
        uses: nais/login@v0
        id: login
        with:
          identity_provider: ${{ secrets.NAIS_WORKLOAD_IDENTITY_PROVIDER }}
          project_id: ${{ vars.NAIS_MANAGEMENT_PROJECT_ID }}
          team: etterlatte
      - name: Lag image-referanse med digest
        run: |
          IMAGE_WITH_TAG="${{ needs.build.outputs.image }}"
          IMAGE="${IMAGE_WITH_TAG%%:*}"
          echo "IMAGE_WITH_DIGEST=${IMAGE}@${{ needs.build.outputs.digest }}" >> $GITHUB_ENV
      - name: Generate SBOM, attest and sign image
        id: attest-sign
        uses: nais/attest-sign@v1
        with:
          image_ref: ${{ env.IMAGE_WITH_DIGEST }}

  deploy-to-dev-gcp:
    name: dev-gcp
    runs-on: ubuntu-latest
    needs: build-and-publish
    permissions:
      contents: read
      id-token: write
    steps:
      - uses: actions/checkout@v4
      - uses: nais/deploy/actions/deploy@v2
        env:
          CLUSTER: dev-gcp
          RESOURCE: apps/${{ github.workflow }}/.nais/dev.yaml
          VAR: image=${{ needs.build-and-publish.outputs.image }}

  deploy-to-prod-gcp:
    name: prod-gcp
    if: ${{ github.ref == 'refs/heads/main' || github.event.inputs.deploy-prod == 'true' }}
    needs: [build-and-publish, deploy-to-dev-gcp, salsa]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: andstor/file-existence-action@v3
        id: check_files
        with:
          files: apps/${{ github.workflow }}/.nais/prod.yaml
      - uses: nais/deploy/actions/deploy@v2
        if: steps.check_files.outputs.files_exists == 'true'
        env:
          CLUSTER: prod-gcp
          RESOURCE: apps/${{ github.workflow }}/.nais/prod.yaml
          VAR: image=${{ needs.build-and-publish.outputs.image }}
