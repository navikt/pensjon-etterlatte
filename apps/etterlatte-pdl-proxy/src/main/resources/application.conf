ktor {
    deployment {
        port = 8080
    }
    application {
        modules = [ no.nav.etterlatte.ApplicationKt.module ]
    }
}

pdl {
    url = "http://localhost:8089/pdl"
    url = ${?PDL_URL}
}


serviceuser {
    name = "srvbarnepensjon"
    password = "srv-password"
    name = ${?SERVICEUSER_USERNAME}
    password = ${?SERVICEUSER_PASSWORD}
}

aad {
    wellKnownUrl = "https://login.microsoftonline.com/62366534-1ec3-4962-8869-9b5535279d0b/v2.0/.well-known/openid-configuration"
    wellKnownUrl = ${?AZURE_APP_WELL_KNOWN_URL}
    clientId = "CLIENT_ID"
    clientId = ${?AZURE_APP_CLIENT_ID}
}

tokenx {
    wellKnownUrl = "https://tokendings.dev-gcp.nais.io/.well-known/oauth-authorization-server"
    wellKnownUrl = ${?TOKEN_X_WELL_KNOWN_URL}
    clientId = "CLIENT_ID"
    clientId = ${?TOKEN_X_CLIENT_ID}
}


no.nav.security.jwt {
  issuers = [
      {
         issuer_name = tokenx
         discoveryurl = "https://tokendings.dev-gcp.nais.io/.well-known/oauth-authorization-server"
         discoveryurl = ${?TOKEN_X_WELL_KNOWN_URL}
         accepted_audience = "CLIENT_ID"
         accepted_audience = ${?TOKEN_X_CLIENT_ID}
      },
      {
         issuer_name = azure
         discoveryurl = ${?AZURE_APP_WELL_KNOWN_URL}
         accepted_audience = ${?AZURE_APP_CLIENT_ID}
      }
  ]
}
no.nav.security.jwt.client.registration {
  clients = [
    {
      client_name = tokenx
      well_known_url = ${?TOKEN_X_WELL_KNOWN_URL}
      authentication = {
        client_id = ${?TOKEN_X_CLIENT_ID}
        client_auth_method = private_key_jwt
        client_jwk = ${?TOKEN_X_PRIVATE_JWK}
      }
    }
  ]
  cache = {
    enabled = true
    maximumSize = 1000
    evictSkew = 5
  }
}
no.nav.etterlatte.tjenester.pdl.url =  ${PDL_URL}
no.nav.etterlatte.tjenester.pdl.audience = ${PDL_AUDIENCE}


